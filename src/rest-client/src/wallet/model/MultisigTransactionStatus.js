/*
 * Wallet API
 * # Introduction Wallet API는 클레이튼 계정을 만들어 관리하고 트랜잭션을 전송하는 API입니다. Wallet API로 Klaytn 계정을 만들면 여러분은 개인키를 따로 관리할 필요가 없습니다. Wallet API는 BApp을 위해 Klaytn 계정 개인키를 안전하게 보관하는 지갑을 제공합니다. Wallet API 사용에 관한 자세한 내용은 [튜토리얼](링크)을 확인하십시오.  Wallet API는 크게 Klaytn 계정을 만들고 관리하는 Account 파트와 여러 종류의 트랜잭션을 전송하는 Transaction 파트로 나뉩니다.  Wallet API는 Klaytn 계정을 생성, 삭제, 모니터링하고 계정을 다중 서명 계정(Multisig 계정)으로 업데이트하며 KAS에 등록된 모든 계정의 개인키를 관리합니다.  또 Wallet API는 트랜잭션을 만들어 Klaytn에 전송합니다. 이 트랜잭션에는 다중 서명 계정이 보내는 트랜잭션도 포함됩니다. 다중 서명 시 임계값\\(Threshold\\)을 만족하면 트랜잭션은 Klaytn에 자동으로 전송됩니다. 다중 서명에 관한 자세한 내용은 [다음](링크)을 확인하십시오.  트랜잭션은 크게 기본 트랜잭션과 수수료 대납 트랜잭션으로 나뉩니다. 수수료 대납 트랜잭션은 크게 글로벌 수수료 대납 트랜잭션과 사용자 수수료 대납 트랜잭션으로 나뉩니다. 글로벌 수수료 대납 트랜잭션은 Ground X의 KAS 계정에서 트랜잭션 수수료를 일단 대납해주고 나중에 여러분에게 이 수수료를 청구하는 방식입니다. 사용자 수수료 대납 트랜잭션은 여러분이 직접 트랜잭션 수수료를 대납하는 계정을 만들고, 트랜잭션을 보낼 때 이 대납 계정이 트랜잭션 수수료를 납부하도록 하는 방식입니다.  Wallet API는 아래와 같은 기능 및 제약사항을 갖고 있습니다.  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | 제약사항 | Cypress(Mainnet), Baobab(Testnet) 지원\\(Service Chain 미지원\\) | |  |  | 외부 관리키에 대한 계정 관리 미지원 | |  |  | RLP 인코딩된 트랜잭션의 다중 서명 미지원 | |  | 계정관리 | 계정 생성, 조회, 삭제 | |  |  | 다중 서명 계정 업데이트 | |  | 트랜잭션 관리 | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) 트랜잭션 생성 및 전송 | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) 트랜잭션 생성 및 전송 | |  |  | RLP 인코딩된 트랜잭션\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) 생성 및 전송 | |  |  | 다중 서명 트랜잭션 관리 및 전송 | |  | 관리자 | 리소스 풀 관리\\(생성, 풀 조회, 삭제, 계정 조회\\) |
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['../../ApiClient'], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../../ApiClient'))
    } else {
        // Browser globals (root is window)
        if (!root.WalletApi) {
            root.WalletApi = {}
        }
        root.WalletApi.MultisigTransactionStatus = factory(root.WalletApi.ApiClient)
    }
})(this, function(ApiClient) {
    /**
     * The MultisigTransactionStatus model module.
     * @module model/MultisigTransactionStatus
     * @version 2.0
     */

    /**
     * Constructs a new <code>MultisigTransactionStatus</code>.
     * 다중 서명 트랜잭션의 현재 상태
     * @alias module:model/MultisigTransactionStatus
     * @class
     * @param signedWeight {Number} 해당 트랜잭션이 서명을 받았을 때, 그 서명들이 가지는 가중치
     * @param status {String} 트랜잭션의 현재 상태
     * @param threshold {Number} 이 트랜잭션이 전송되는 데 필요한 가중치 총합
     * @param transactionId {String} 다중 서명 트랜잭션을 식별하는 ID
     * @param weight {Number} 트랜잭션의 연관된 Multisig account 전체의 가중치 합
     */
    const MultisigTransactionStatus = function(signedWeight, status, threshold, transactionId, weight) {
        this.signedWeight = signedWeight
        this.status = status
        this.threshold = threshold
        this.transactionId = transactionId
        this.weight = weight
    }

    /**
     * Constructs a <code>MultisigTransactionStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultisigTransactionStatus} obj Optional instance to populate.
     * @return {module:model/MultisigTransactionStatus} The populated <code>MultisigTransactionStatus</code> instance.
     */
    MultisigTransactionStatus.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new MultisigTransactionStatus()
            if (data.hasOwnProperty('signedWeight')) obj.signedWeight = ApiClient.convertToType(data.signedWeight, 'Number')
            if (data.hasOwnProperty('status')) obj.status = ApiClient.convertToType(data.status, 'String')
            if (data.hasOwnProperty('threshold')) obj.threshold = ApiClient.convertToType(data.threshold, 'Number')
            if (data.hasOwnProperty('transactionHash')) obj.transactionHash = ApiClient.convertToType(data.transactionHash, 'String')
            if (data.hasOwnProperty('transactionId')) obj.transactionId = ApiClient.convertToType(data.transactionId, 'String')
            if (data.hasOwnProperty('weight')) obj.weight = ApiClient.convertToType(data.weight, 'Number')
            if (data.hasOwnProperty('reminders')) obj.reminders = ApiClient.convertToType(data.reminders, ['String'])
        }
        return obj
    }

    /**
     * 해당 트랜잭션이 서명을 받았을 때, 그 서명들이 가지는 가중치
     * @member {Number} signedWeight
     */
    MultisigTransactionStatus.prototype.signedWeight = undefined

    /**
     * 트랜잭션의 현재 상태
     * @member {String} status
     */
    MultisigTransactionStatus.prototype.status = undefined

    /**
     * 이 트랜잭션이 전송되는 데 필요한 가중치 총합
     * @member {Number} threshold
     */
    MultisigTransactionStatus.prototype.threshold = undefined

    /**
     * @member {String} transactionHash
     */
    MultisigTransactionStatus.prototype.transactionHash = undefined

    /**
     * 다중 서명 트랜잭션을 식별하는 ID
     * @member {String} transactionId
     */
    MultisigTransactionStatus.prototype.transactionId = undefined

    /**
     * 트랜잭션의 연관된 Multisig account 전체의 가중치 합
     * @member {Number} weight
     */
    MultisigTransactionStatus.prototype.weight = undefined

    /**
     * @member {Array.<String>} reminders
     */
    MultisigTransactionStatus.prototype.reminders = undefined

    return MultisigTransactionStatus
})
