/*
 * Wallet API
 * # Introduction Wallet API는 클레이튼 계정을 만들어 관리하고 트랜잭션을 전송하는 API입니다. Wallet API로 Klaytn 계정을 만들면 여러분은 개인키를 따로 관리할 필요가 없습니다. Wallet API는 BApp을 위해 Klaytn 계정 개인키를 안전하게 보관하는 지갑을 제공합니다. Wallet API 사용에 관한 자세한 내용은 [튜토리얼](링크)을 확인하십시오.  Wallet API는 크게 Klaytn 계정을 만들고 관리하는 Account 파트와 여러 종류의 트랜잭션을 전송하는 Transaction 파트로 나뉩니다.  Wallet API는 Klaytn 계정을 생성, 삭제, 모니터링하고 계정을 다중 서명 계정(Multisig 계정)으로 업데이트하며 KAS에 등록된 모든 계정의 개인키를 관리합니다.  또 Wallet API는 트랜잭션을 만들어 Klaytn에 전송합니다. 이 트랜잭션에는 다중 서명 계정이 보내는 트랜잭션도 포함됩니다. 다중 서명 시 임계값\\(Threshold\\)을 만족하면 트랜잭션은 Klaytn에 자동으로 전송됩니다. 다중 서명에 관한 자세한 내용은 [다음](링크)을 확인하십시오.  트랜잭션은 크게 기본 트랜잭션과 수수료 대납 트랜잭션으로 나뉩니다. 수수료 대납 트랜잭션은 크게 글로벌 수수료 대납 트랜잭션과 사용자 수수료 대납 트랜잭션으로 나뉩니다. 글로벌 수수료 대납 트랜잭션은 Ground X의 KAS 계정에서 트랜잭션 수수료를 일단 대납해주고 나중에 여러분에게 이 수수료를 청구하는 방식입니다. 사용자 수수료 대납 트랜잭션은 여러분이 직접 트랜잭션 수수료를 대납하는 계정을 만들고, 트랜잭션을 보낼 때 이 대납 계정이 트랜잭션 수수료를 납부하도록 하는 방식입니다.  Wallet API는 아래와 같은 기능 및 제약사항을 갖고 있습니다.  | Version | Item | Description | | :--- | :--- | :--- | | 2.0 | 제약사항 | Cypress(Mainnet), Baobab(Testnet) 지원\\(Service Chain 미지원\\) | |  |  | 외부 관리키에 대한 계정 관리 미지원 | |  |  | RLP 인코딩된 트랜잭션의 다중 서명 미지원 | |  | 계정관리 | 계정 생성, 조회, 삭제 | |  |  | 다중 서명 계정 업데이트 | |  | 트랜잭션 관리 | [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic) 트랜잭션 생성 및 전송 | |  |  | [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation) 트랜잭션 생성 및 전송 | |  |  | RLP 인코딩된 트랜잭션\\([Legacy](https://ko.docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction), [Basic](https://ko.docs.klaytn.com/klaytn/design/transactions/basic), [FeeDelegatedWithRatio](https://ko.docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation)\\) 생성 및 전송 | |  |  | 다중 서명 트랜잭션 관리 및 전송 | |  | 관리자 | 리소스 풀 관리\\(생성, 풀 조회, 삭제, 계정 조회\\) |
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/ErrorResponse',
            '../model/FDTransactionResult',
            '../model/FDUserAccountUpdateTransactionRequest',
            '../model/FDUserAnchorTransactionRequest',
            '../model/FDUserCancelTransactionRequest',
            '../model/FDUserContractDeployTransactionRequest',
            '../model/FDUserContractExecutionTransactionRequest',
            '../model/FDUserProcessRLPRequest',
            '../model/FDUserValueTransferTransactionRequest',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ErrorResponse'),
            require('../model/FDTransactionResult'),
            require('../model/FDUserAccountUpdateTransactionRequest'),
            require('../model/FDUserAnchorTransactionRequest'),
            require('../model/FDUserCancelTransactionRequest'),
            require('../model/FDUserContractDeployTransactionRequest'),
            require('../model/FDUserContractExecutionTransactionRequest'),
            require('../model/FDUserProcessRLPRequest'),
            require('../model/FDUserValueTransferTransactionRequest')
        )
    } else {
        // Browser globals (root is window)
        if (!root.WalletApi) {
            root.WalletApi = {}
        }
        root.WalletApi.FeeDelegatedTransactionPaidByUserApi = factory(
            root.WalletApi.ApiClient,
            root.WalletApi.ErrorResponse,
            root.WalletApi.FDTransactionResult,
            root.WalletApi.FDUserAccountUpdateTransactionRequest,
            root.WalletApi.FDUserAnchorTransactionRequest,
            root.WalletApi.FDUserCancelTransactionRequest,
            root.WalletApi.FDUserContractDeployTransactionRequest,
            root.WalletApi.FDUserContractExecutionTransactionRequest,
            root.WalletApi.FDUserProcessRLPRequest,
            root.WalletApi.FDUserValueTransferTransactionRequest
        )
    }
})(this, function(
    ApiClient,
    ErrorResponse,
    FDTransactionResult,
    FDUserAccountUpdateTransactionRequest,
    FDUserAnchorTransactionRequest,
    FDUserCancelTransactionRequest,
    FDUserContractDeployTransactionRequest,
    FDUserContractExecutionTransactionRequest,
    FDUserProcessRLPRequest,
    FDUserValueTransferTransactionRequest
) {
    /**
     * FeeDelegatedTransactionPaidByUser service.
     * @module api/FeeDelegatedTransactionPaidByUserApi
     * @version 2.0
     */

    /**
     * Constructs a new FeeDelegatedTransactionPaidByUserApi.
     * @alias module:api/FeeDelegatedTransactionPaidByUserApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the uFDAccountUpdateTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDAccountUpdateTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDAccountUpdateTransaction
         * 유저가 생성한 대납 계정으로 클레이튼 계정 키를 다른 종류의 키로 업데이트하는 트랜잭션을 생성합니다. 클레이튼 계정 키 종류는 [다음](https://ko.docs.klaytn.com/klaytn/design/accounts)을 확인하십시오.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserAccountUpdateTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDAccountUpdateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDAccountUpdateTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDAccountUpdateTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/account',
                'PUT',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDAnchorTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDAnchorTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDAnchorTransaction
         * 유저가 생성한 대납 계정으로 서비스 체인 데이터를 메인 체인에 앵커링하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserAnchorTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDAnchorTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDAnchorTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDAnchorTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}
            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/anchor',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDContractDeployTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDContractDeployTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDContractDeployTransaction
         * 유저가 생성한 대납 계정으로 컨트랙트를 배포하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserContractDeployTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDContractDeployTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDContractDeployTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDContractDeployTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/contract/deploy',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDContractExecutionTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDContractExecutionTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDContractExecutionTransaction
         * 유저가 생성한 대납 계정으로 배포된 컨트랙트 함수를 실행하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserContractExecutionTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDContractExecutionTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDContractExecutionTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDContractExecutionTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/contract/execute',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDProcessRLP operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDProcessRLPCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDProcessRLP
         * 유저가 생성한 대납 계정으로 RLP(SigRLP 또는 TxHashRLP)를 사용해 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserProcessRLPRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDProcessRLPCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDProcessRLP = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDProcessRLP")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/rlp',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDUserCancelTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDUserCancelTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDUserCancelTransaction
         * 유저가 만든 대납 계정으로 Klaytn에 전송했으나 보류중인 트랜잭션을 취소시키기 위한 트랜잭션을 생성합니다. 취소를 위해 논스 또는 트랜잭션 해시 둘 중 하나의 값이 꼭 필요합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserCancelTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDUserCancelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDUserCancelTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDUserCancelTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the uFDValueTransferTransaction operation.
         * @callback module:api/FeeDelegatedTransactionPaidByUserApi~uFDValueTransferTransactionCallback
         * @param {String} error Error message, if any.
         * @param {module:model/FDTransactionResult} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * UFDValueTransferTransaction
         * 유저가 생성한 대납 계정으로 메모와 함께 클레이를 전송하는 트랜잭션을 생성합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/FDUserValueTransferTransactionRequest} opts.body
         * @param {module:api/FeeDelegatedTransactionPaidByUserApi~uFDValueTransferTransactionCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/FDTransactionResult}
         */
        this.uFDValueTransferTransaction = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling uFDValueTransferTransaction")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = FDTransactionResult

            return this.apiClient.callApi(
                '/v2/tx/fd-user/value',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return exports
})
