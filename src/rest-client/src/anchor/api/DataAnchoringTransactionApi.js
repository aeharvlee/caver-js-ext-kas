/*
 * Anchor API
 * # Introduction 이 문서는 KAS\\(Klaytn API Service\\)의 Anchor API를 소개하는 문서입니다. Anchor API는 서비스 체인 데이터의 신뢰성을 보장하기 위해 데이터 신뢰성을 증명할 수 있는 메타데이터를 Klaytn 메인 체인에 전송하는 기능을 제공합니다.  자세한 사용 예시는 [튜토리얼](링크)를 확인하십시오.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model//AnchorBlockRequest',
            '../model//AnchorBlockStatus',
            '../model//AnchorBlockTransactions',
            '../model//AnchorTransactions',
            '../model//ErrorResponse',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/AnchorBlockRequest'),
            require('../model/AnchorBlockStatus'),
            require('../model/AnchorBlockTransactions'),
            require('../model/AnchorTransactions'),
            require('../model/ErrorResponse')
        )
    } else {
        // Browser globals (root is window)
        if (!root.AnchorApi) {
            root.AnchorApi = {}
        }
        root.AnchorApi.DataAnchoringTransactionApi = factory(
            root.AnchorApi.ApiClient,
            root.AnchorApi.AnchorBlockRequest,
            root.AnchorApi.AnchorBlockStatus,
            root.AnchorApi.AnchorBlockTransactions,
            root.AnchorApi.AnchorTransactions,
            root.AnchorApi.ErrorResponse
        )
    }
})(this, function(ApiClient, AnchorBlockRequest, AnchorBlockStatus, AnchorBlockTransactions, AnchorTransactions, ErrorResponse) {
    /**
     * DataAnchoringTransaction service.
     * @module api/DataAnchoringTransactionApi
     * @version 1.0
     */

    /**
     * Constructs a new DataAnchoringTransactionApi.
     * @alias module:api/DataAnchoringTransactionApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the anchorBlock operation.
         * @callback module:api/DataAnchoringTransactionApi~anchorBlockCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AnchorBlockStatus} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * AnchorBlock
         * 블록체인 데이터를 앵커링 하기 위해 사용됩니다. 이미 설정한 오퍼레이터를 통해 앵커 트랜잭션 발생 및 관리합니다. 오퍼레이터 또는 사용자 Feepayer 를 통한 앵커링을 성공하기 위해서는 실제 요구되는 수수료의 10배이상 잔액을 보유하여야 합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {Object} opts Optional parameters
         * @param {module:model/AnchorBlockRequest} opts.body
         * @param {module:api/DataAnchoringTransactionApi~anchorBlockCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/AnchorBlockStatus}
         */
        this.anchorBlock = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling anchorBlock")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AnchorBlockStatus

            return this.apiClient.callApi(
                '/v1/anchor',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getAnchorBlockByPayloadID operation.
         * @callback module:api/DataAnchoringTransactionApi~getAnchorBlockByPayloadIDCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AnchorBlockTransactions} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetAnchorBlockByPayloadID
         * Paylaod ID와 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} operatorId 오퍼레이터 계정 주소
         * @param {String} payloadId 페이로드 ID
         * @param {module:api/DataAnchoringTransactionApi~getAnchorBlockByPayloadIDCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/AnchorBlockTransactions}
         */
        this.getAnchorBlockByPayloadID = function(xChainId, operatorId, payloadId, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getAnchorBlockByPayloadID")
            }

            // verify the required parameter 'operatorId' is set
            if (operatorId === undefined || operatorId === null) {
                throw new Error("Missing the required parameter 'operatorId' when calling getAnchorBlockByPayloadID")
            }

            // verify the required parameter 'payloadId' is set
            if (payloadId === undefined || payloadId === null) {
                throw new Error("Missing the required parameter 'payloadId' when calling getAnchorBlockByPayloadID")
            }

            const pathParams = {
                'operator-id': operatorId,
                'payload-id': payloadId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}
            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AnchorBlockTransactions

            return this.apiClient.callApi(
                '/v1/operator/{operator-id}/payload/{payload-id}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getAnchorBlockByTx operation.
         * @callback module:api/DataAnchoringTransactionApi~getAnchorBlockByTxCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AnchorBlockTransactions} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetAnchorBlockByTx
         * 트랜잭션 해시값과 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션을 조회합니다. 트랜잭션을 일으킬 때 트랜잭션에 덧붙인 Payload를 살펴볼 수 있습니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} operatorId 오퍼레이터 계정 주소
         * @param {String} transactionHash 트랜잭션 해시
         * @param {module:api/DataAnchoringTransactionApi~getAnchorBlockByTxCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/AnchorBlockTransactions}
         */
        this.getAnchorBlockByTx = function(xChainId, operatorId, transactionHash, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getAnchorBlockByTx")
            }

            // verify the required parameter 'operatorId' is set
            if (operatorId === undefined || operatorId === null) {
                throw new Error("Missing the required parameter 'operatorId' when calling getAnchorBlockByTx")
            }

            // verify the required parameter 'transactionHash' is set
            if (transactionHash === undefined || transactionHash === null) {
                throw new Error("Missing the required parameter 'transactionHash' when calling getAnchorBlockByTx")
            }

            const pathParams = {
                'operator-id': operatorId,
                'transaction-hash': transactionHash,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AnchorBlockTransactions

            return this.apiClient.callApi(
                '/v1/operator/{operator-id}/tx/{transaction-hash}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the retrieveAnchorBlock operation.
         * @callback module:api/DataAnchoringTransactionApi~retrieveAnchorBlockCallback
         * @param {String} error Error message, if any.
         * @param {module:model/AnchorTransactions} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * RetrieveAnchorBlock
         * 오퍼레이터 ID를 지정하여, 이 오퍼레이터가 생성한 트랜잭션 목록을 조회합니다.
         * @param {String} xChainId Klaytn 체인 네트워크 ID (1001 or 8217)
         * @param {String} operatorId 오퍼레이터 계정 주소
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size 검색할 계정의 최대 사이즈 (default: 100, min:1, max:-)
         * @param {String} opts.cursor 마지막으로 검색된 커서의 정보
         * @param {Number} opts.fromTimestamp 검색하고자 하는 처음 시간의 타임스탬프 (초단위)
         * @param {Number} opts.toTimestamp 검색하고자 하는 마지막 시간의 타임스탬프 (초단위)
         * @param {module:api/DataAnchoringTransactionApi~retrieveAnchorBlockCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link module:model/AnchorTransactions}
         */
        this.retrieveAnchorBlock = function(xChainId, operatorId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling retrieveAnchorBlock")
            }

            // verify the required parameter 'operatorId' is set
            if (operatorId === undefined || operatorId === null) {
                throw new Error("Missing the required parameter 'operatorId' when calling retrieveAnchorBlock")
            }

            const pathParams = {
                'operator-id': operatorId,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
                'from-timestamp': opts.fromTimestamp,
                'to-timestamp': opts.toTimestamp,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = AnchorTransactions

            return this.apiClient.callApi(
                '/v1/operator/{operator-id}/tx',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return exports
})
